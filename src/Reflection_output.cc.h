/*
 * This file was aut-generated by tiliaeparser. Do not modify. Unless.
 * Include only once.
 * https://github.com/iwasz/tiliae
 */

#include <reflection/Reflection.h>
#include "Reflection_input.cc"

namespace {
using namespace Core;
using namespace Reflection;

void createReflectionDatabase_dataFlowGui ()
{
	{
		Class *clazz = new Class ("Object", typeid (Core::Object &), new Reflection::PtrDeleter <Core::Object>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("IEditor", typeid (Editor::IEditor &), new Reflection::PtrDeleter <Editor::IEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::IEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("IFactory", typeid (Factory::IFactory &), new Reflection::PtrDeleter <Factory::IFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::IFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("JEditor", typeid (Editor::JEditor &), new Reflection::PtrDeleter <Editor::JEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IEditor");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::JEditor::convert)));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::JEditor::edit)));
		}
	}
	{
		Class *clazz = new Class ("ListToStringEditor", typeid (Editor::ListToStringEditor &), new Reflection::PtrDeleter <Editor::ListToStringEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("JEditor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, const std::string &, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::ListToStringEditor::edit)));
			clazz->addMethod (new Method ("getDelimiter", createMethodWrapper (&Editor::ListToStringEditor::getDelimiter)));
			clazz->addMethod (new Method ("setDelimiter", createMethodWrapper (&Editor::ListToStringEditor::setDelimiter)));
			clazz->addMethod (new Method ("getQuotation", createMethodWrapper (&Editor::ListToStringEditor::getQuotation)));
			clazz->addMethod (new Method ("setQuotation", createMethodWrapper (&Editor::ListToStringEditor::setQuotation)));
		}
	}
	{
		Class *clazz = new Class ("ChainFactory", typeid (Factory::ChainFactory &), new Reflection::PtrDeleter <Factory::ChainFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactory");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, _Bool>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::ChainFactory::create)));
			clazz->addMethod (new Method ("setFactories", createMethodWrapper (&Factory::ChainFactory::setFactories)));
			clazz->addMethod (new Method ("addFactory", createMethodWrapper (&Factory::ChainFactory::addFactory)));
			clazz->addMethod (new Method ("getFactories", createMethodWrapper (&Factory::ChainFactory::getFactories)));
		}
	}
	{
		Class *clazz = new Class ("K202", typeid (k202::K202 &), new Reflection::PtrDeleter <k202::K202>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("setBeanWrapper", createMethodWrapper (&k202::K202::setBeanWrapper)));
		}
	}
	{
		Class *clazz = new Class ("Sender", typeid (Signal::Sender &), new Reflection::PtrDeleter <Signal::Sender>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getOwnerObject", createMethodWrapper (&Signal::Sender::getOwnerObject)));
			clazz->addMethod (new Method ("setOwnerObject", createMethodWrapper (&Signal::Sender::setOwnerObject)));
			clazz->addMethod (new Method ("getScope", createMethodWrapper (&Signal::Sender::getScope)));
			clazz->addMethod (new Method ("setScope", createMethodWrapper (&Signal::Sender::setScope)));
			clazz->addMethod (new Method ("setPath", createMethodWrapper (&Signal::Sender::setPath)));
			clazz->addMethod (new Method ("getPath", createMethodWrapper (&Signal::Sender::getPath)));
			clazz->addMethod (new Method ("getParamVector", createMethodWrapper (&Signal::Sender::getParamVector)));
			clazz->addMethod (new Method ("setParamVector", createMethodWrapper (&Signal::Sender::setParamVector)));
			clazz->addMethod (new Method ("getParamMap", createMethodWrapper (&Signal::Sender::getParamMap)));
			clazz->addMethod (new Method ("setParamMap", createMethodWrapper (&Signal::Sender::setParamMap)));
		}
	}
	{
		Class *clazz = new Class ("IPageDecorator", typeid (GtkForms::IPageDecorator &), new Reflection::PtrDeleter <GtkForms::IPageDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::IPageDecorator::preShow)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::IPageDecorator::postShow)));
			clazz->addMethod (new Method ("preSubmit", createMethodWrapper (&GtkForms::IPageDecorator::preSubmit)));
			clazz->addMethod (new Method ("postRefresh", createMethodWrapper (&GtkForms::IPageDecorator::postRefresh)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::IPageDecorator::preClose)));
		}
	}
	{
		Class *clazz = new Class ("PageDecoratorVector", typeid (GtkForms::PageDecoratorVector&), new PtrDeleter <GtkForms::PageDecoratorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::PageDecoratorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractPageDecorator", typeid (GtkForms::AbstractPageDecorator &), new Reflection::PtrDeleter <GtkForms::AbstractPageDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::AbstractPageDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::AbstractPageDecorator::preShow)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::AbstractPageDecorator::postShow)));
			clazz->addMethod (new Method ("preSubmit", createMethodWrapper (&GtkForms::AbstractPageDecorator::preSubmit)));
			clazz->addMethod (new Method ("postRefresh", createMethodWrapper (&GtkForms::AbstractPageDecorator::postRefresh)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::AbstractPageDecorator::preClose)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDatabase", typeid (GtkForms::DimensionRestoreDatabase &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDatabase>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDatabase, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("load", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::load)));
			clazz->addMethod (new Method ("save", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::save)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::set)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::DimensionRestoreDatabase::get)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDecorator", typeid (GtkForms::DimensionRestoreDecorator &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::widget)));
			clazz->addField (new Field ("key", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::key)));
			clazz->addField (new Field ("database", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDecorator::database)));
			clazz->addMethod (new Method ("postShow", createMethodWrapper (&GtkForms::DimensionRestoreDecorator::postShow)));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::DimensionRestoreDecorator::preShow)));
		}
	}
	{
		Class *clazz = new Class ("DimensionRestoreDatabaseDecorator", typeid (GtkForms::DimensionRestoreDatabaseDecorator &), new Reflection::PtrDeleter <GtkForms::DimensionRestoreDatabaseDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractPageDecorator");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::DimensionRestoreDatabaseDecorator, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("database", Reflection::createFieldWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::database)));
			clazz->addMethod (new Method ("preShow", createMethodWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::preShow)));
			clazz->addMethod (new Method ("preClose", createMethodWrapper (&GtkForms::DimensionRestoreDatabaseDecorator::preClose)));
		}
	}
	{
		Class *clazz = new Class ("DfDimensionRestoreDatabase", typeid (DfDimensionRestoreDatabase &), new Reflection::PtrDeleter <DfDimensionRestoreDatabase>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("DimensionRestoreDatabase");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <DfDimensionRestoreDatabase, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("load", createMethodWrapper (&DfDimensionRestoreDatabase::load)));
			clazz->addMethod (new Method ("save", createMethodWrapper (&DfDimensionRestoreDatabase::save)));
		}
	}
	{
		Class *clazz = new Class ("UserConfig", typeid (UserConfig &), new Reflection::PtrDeleter <UserConfig>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <UserConfig, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("set", createMethodWrapper (&UserConfig::set)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&UserConfig::get)));
		}
	}
	{
		Class *clazz = new Class ("Arc", typeid (flow::Arc &), new Reflection::PtrDeleter <flow::Arc>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Arc, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Arc, int>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isFull", createMethodWrapper (&flow::Arc::isFull)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&flow::Arc::get)));
			clazz->addMethod (new Method ("put", createMethodWrapper (&flow::Arc::put)));
			clazz->addMethod (new Method ("getValue", createMethodWrapper (&flow::Arc::getValue)));
			clazz->addMethod (new Method ("getNodeInputSide", createMethodWrapper (&flow::Arc::getNodeInputSide)));
			clazz->addMethod (new Method ("setNodeInputSide", createMethodWrapper (&flow::Arc::setNodeInputSide)));
			clazz->addMethod (new Method ("getNodeOutputSide", createMethodWrapper (&flow::Arc::getNodeOutputSide)));
			clazz->addMethod (new Method ("setNodeOutputSide", createMethodWrapper (&flow::Arc::setNodeOutputSide)));
			clazz->addMethod (new Method ("disconnect", createMethodWrapper (&flow::Arc::disconnect)));
		}
	}
	{
		Class *clazz = new Class ("INode", typeid (flow::INode &), new Reflection::PtrDeleter <flow::INode>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::INode::process)));
			clazz->addMethod (new Method ("inputsOk", createMethodWrapper (&flow::INode::inputsOk)));
			clazz->addMethod (new Method ("outputsOk", createMethodWrapper (&flow::INode::outputsOk)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::INode::reset)));
			clazz->addMethod (new Method ("addOutput", createMethodWrapper (&flow::INode::addOutput)));
			clazz->addMethod (new Method ("setInput", createMethodWrapper (&flow::INode::setInput)));
			clazz->addMethod (new Method ("disconnectOutput", createMethodWrapper (&flow::INode::disconnectOutput)));
			clazz->addMethod (new Method ("disconnectInput", createMethodWrapper (&flow::INode::disconnectInput)));
			clazz->addMethod (new Method ("setProgram", createMethodWrapper (&flow::INode::setProgram)));
		}
	}
	{
		Class *clazz = new Class ("Console", typeid (flow::Console &), new Reflection::PtrDeleter <flow::Console>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Console, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&flow::Console::process)));
		}
	}
	{
		Class *clazz = new Class ("ConsoleNode", typeid (ConsoleNode &), new Reflection::PtrDeleter <ConsoleNode>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Console");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ConsoleNode, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("process", createMethodWrapper (&ConsoleNode::process)));
		}
	}
	{
		Class *clazz = new Class ("Tool", typeid (Tool &), new Reflection::PtrDeleter <Tool>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Tool, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("drawStrategy", Reflection::createFieldWrapper (&Tool::drawStrategy)));
			clazz->addField (new Field ("factoryStrategy", Reflection::createFieldWrapper (&Tool::factoryStrategy)));
			clazz->addField (new Field ("selectorStrategy", Reflection::createFieldWrapper (&Tool::selectorStrategy)));
			clazz->addField (new Field ("name", Reflection::createFieldWrapper (&Tool::name)));
			clazz->addField (new Field ("description", Reflection::createFieldWrapper (&Tool::description)));
			clazz->addField (new Field ("imagePath", Reflection::createFieldWrapper (&Tool::imagePath)));
		}
	}
	{
		Class *clazz = new Class ("ToolVector", typeid (ToolVector&), new PtrDeleter <ToolVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <ToolVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <ToolVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <ToolVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <ToolVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <ToolVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("ToolCategory", typeid (ToolCategory &), new Reflection::PtrDeleter <ToolCategory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ToolCategory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("name", Reflection::createFieldWrapper (&ToolCategory::name)));
			clazz->addField (new Field ("description", Reflection::createFieldWrapper (&ToolCategory::description)));
			clazz->addField (new Field ("tools", Reflection::createFieldWrapper (&ToolCategory::tools)));
		}
	}
	{
		Class *clazz = new Class ("ToolCategoryVector", typeid (ToolCategoryVector&), new PtrDeleter <ToolCategoryVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <ToolCategoryVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <ToolCategoryVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <ToolCategoryVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <ToolCategoryVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <ToolCategoryVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("ToolContainer", typeid (ToolContainer &), new Reflection::PtrDeleter <ToolContainer>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ToolContainer, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getTools", createMethodWrapper (&ToolContainer::getTools)));
			clazz->addMethod (new Method ("setTools", createMethodWrapper (&ToolContainer::setTools)));
		}
	}
	{
		Class *clazz = new Class ("AbstractAccessor", typeid (GtkForms::AbstractAccessor &), new Reflection::PtrDeleter <GtkForms::AbstractAccessor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::AbstractAccessor::get)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::AbstractAccessor::set)));
			clazz->addMethod (new Method ("setSessionScope", createMethodWrapper (&GtkForms::AbstractAccessor::setSessionScope)));
			clazz->addMethod (new Method ("setCurrentController", createMethodWrapper (&GtkForms::AbstractAccessor::setCurrentController)));
		}
	}
	{
		Class *clazz = new Class ("IValidator", typeid (GtkForms::IValidator &), new Reflection::PtrDeleter <GtkForms::IValidator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("validate", createMethodWrapper (&GtkForms::IValidator::validate)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::IValidator::getModel)));
		}
	}
	{
		Class *clazz = new Class ("ValidatorVector", typeid (GtkForms::ValidatorVector&), new PtrDeleter <GtkForms::ValidatorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::ValidatorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::ValidatorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("IMapping", typeid (GtkForms::IMapping &), new Reflection::PtrDeleter <GtkForms::IMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::IMapping::getWidget)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::IMapping::getModel)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::IMapping::getProperty)));
			clazz->addMethod (new Method ("getConstValue", createMethodWrapper (&GtkForms::IMapping::getConstValue)));
		}
	}
	{
		Class *clazz = new Class ("Mapping", typeid (GtkForms::Mapping &), new Reflection::PtrDeleter <GtkForms::Mapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IMapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::Mapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::Mapping::widget)));
			clazz->addField (new Field ("property", Reflection::createFieldWrapper (&GtkForms::Mapping::property)));
			clazz->addField (new Field ("model", Reflection::createFieldWrapper (&GtkForms::Mapping::model)));
			clazz->addField (new Field ("m2vEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::m2vEditor)));
			clazz->addField (new Field ("v2mEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::v2mEditor)));
			clazz->addField (new Field ("constValue", Reflection::createFieldWrapper (&GtkForms::Mapping::constValue)));
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::Mapping::getWidget)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::Mapping::getProperty)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::Mapping::getModel)));
			clazz->addMethod (new Method ("getConstValue", createMethodWrapper (&GtkForms::Mapping::getConstValue)));
		}
	}
	{
		Class *clazz = new Class ("MappingVector", typeid (GtkForms::MappingVector&), new PtrDeleter <GtkForms::MappingVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::MappingVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("ISignalAdapter", typeid (GtkForms::ISignalAdapter &), new Reflection::PtrDeleter <GtkForms::ISignalAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::ISignalAdapter::getSignal)));
			clazz->addMethod (new Method ("getGObjectName", createMethodWrapper (&GtkForms::ISignalAdapter::getGObjectName)));
			clazz->addMethod (new Method ("getWidgetId", createMethodWrapper (&GtkForms::ISignalAdapter::getWidgetId)));
			clazz->addMethod (new Method ("adapt", createMethodWrapper (&GtkForms::ISignalAdapter::adapt)));
		}
	}
	{
		Class *clazz = new Class ("SignalAdapterVector", typeid (GtkForms::SignalAdapterVector&), new PtrDeleter <GtkForms::SignalAdapterVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::SignalAdapterVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::SignalAdapterVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractSignalAdapter", typeid (GtkForms::AbstractSignalAdapter &), new Reflection::PtrDeleter <GtkForms::AbstractSignalAdapter>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("ISignalAdapter");
			clazz->addMethod (new Method ("getSignal", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getSignal)));
			clazz->addMethod (new Method ("getGObjectName", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getGObjectName)));
			clazz->addMethod (new Method ("getWidgetId", createMethodWrapper (&GtkForms::AbstractSignalAdapter::getWidgetId)));
			clazz->addMethod (new Method ("setSignal", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setSignal)));
			clazz->addMethod (new Method ("setGObjectName", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setGObjectName)));
			clazz->addMethod (new Method ("setWidgetId", createMethodWrapper (&GtkForms::AbstractSignalAdapter::setWidgetId)));
		}
	}
	{
		Class *clazz = new Class ("AbstractView", typeid (GtkForms::AbstractView &), new Reflection::PtrDeleter <GtkForms::AbstractView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("name", Reflection::createFieldWrapper (&GtkForms::AbstractView::name)));
			clazz->addField (new Field ("mappings", Reflection::createFieldWrapper (&GtkForms::AbstractView::mappings)));
			clazz->addField (new Field ("decorators", Reflection::createFieldWrapper (&GtkForms::AbstractView::decorators)));
			clazz->addField (new Field ("signalAdapters", Reflection::createFieldWrapper (&GtkForms::AbstractView::signalAdapters)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&GtkForms::AbstractView::getName)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&GtkForms::AbstractView::contId)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::AbstractView::loadUi)));
			clazz->addMethod (new Method ("show", createMethodWrapper (&GtkForms::AbstractView::show)));
			clazz->addMethod (new Method ("hide", createMethodWrapper (&GtkForms::AbstractView::hide)));
			clazz->addMethod (new Method ("refresh", createMethodWrapper (&GtkForms::AbstractView::refresh)));
			clazz->addMethod (new Method ("reparent", createMethodWrapper (&GtkForms::AbstractView::reparent)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::AbstractView::destroyUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::AbstractView::isLoaded)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::AbstractView::getUiOrThrow)));
			clazz->addMethod (new Method ("getInputOutputWidgets", createMethodWrapper (&GtkForms::AbstractView::getInputOutputWidgets)));
			clazz->addMethod (new Method ("getSlots", createMethodWrapper (&GtkForms::AbstractView::getSlots)));
			clazz->addMethod (new Method ("getSlot", createMethodWrapper (&GtkForms::AbstractView::getSlot)));
			clazz->addMethod (new Method ("printStructure", createMethodWrapper (&GtkForms::AbstractView::printStructure)));
			clazz->addMethod (new Method ("getMappingsByInputRange", createMethodWrapper (&GtkForms::AbstractView::getMappingsByInputRange)));
			clazz->addMethod (new Method ("getMappingsByModelRange", createMethodWrapper (&GtkForms::AbstractView::getMappingsByModelRange)));
			clazz->addMethod (new Method ("runDecorators", createMethodWrapper (&GtkForms::AbstractView::runDecorators)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::AbstractView::connectSignals)));
			clazz->addMethod (new Method ("getSignalAdapters", createMethodWrapper (&GtkForms::AbstractView::getSignalAdapters)));
			clazz->addMethod (new Method ("getControllerFromUi", createMethodWrapper (&GtkForms::AbstractView::getControllerFromUi)));
			clazz->addMethod (new Method ("setControllerToUi", createMethodWrapper (&GtkForms::AbstractView::setControllerToUi)));
			clazz->addMethod (new Method ("getController", createMethodWrapper (&GtkForms::AbstractView::getController)));
			clazz->addMethod (new Method ("setController", createMethodWrapper (&GtkForms::AbstractView::setController)));
			clazz->addMethod (new Method ("setConfig", createMethodWrapper (&GtkForms::AbstractView::setConfig)));
		}
	}
	{
		Class *clazz = new Class ("ControllerMap", typeid (GtkForms::ControllerMap&), new PtrDeleter <GtkForms::ControllerMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::ControllerMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::ControllerMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractController", typeid (GtkForms::AbstractController &), new Reflection::PtrDeleter <GtkForms::AbstractController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("validators", Reflection::createFieldWrapper (&GtkForms::AbstractController::validators)));
			clazz->addField (new Field ("loopDelayMs", Reflection::createFieldWrapper (&GtkForms::AbstractController::loopDelayMs)));
			clazz->addField (new Field ("alsoOpen", Reflection::createFieldWrapper (&GtkForms::AbstractController::alsoOpen)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&GtkForms::AbstractController::set)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&GtkForms::AbstractController::get)));
			clazz->addMethod (new Method ("setToSessionScope", createMethodWrapper (&GtkForms::AbstractController::setToSessionScope)));
			clazz->addMethod (new Method ("clearControllerScope", createMethodWrapper (&GtkForms::AbstractController::clearControllerScope)));
			clazz->addMethod (new Method ("getModelAccessor", createMethodWrapper (&GtkForms::AbstractController::getModelAccessor)));
			clazz->addMethod (new Method ("open", createMethodWrapper (&GtkForms::AbstractController::open)));
			clazz->addMethod (new Method ("openList", createMethodWrapper (&GtkForms::AbstractController::openList)));
			clazz->addMethod (new Method ("closeThis", createMethodWrapper (&GtkForms::AbstractController::closeThis)));
			clazz->addMethod (new Method ("close", createMethodWrapper (&GtkForms::AbstractController::close)));
			clazz->addMethod (new Method ("closeList", createMethodWrapper (&GtkForms::AbstractController::closeList)));
			clazz->addMethod (new Method ("replace", createMethodWrapper (&GtkForms::AbstractController::replace)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&GtkForms::AbstractController::getName)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&GtkForms::AbstractController::contId)));
			clazz->addMethod (new Method ("findByName", createMethodWrapper (&GtkForms::AbstractController::findByName)));
			clazz->addMethod (new Method ("validate", createMethodWrapper (&GtkForms::AbstractController::validate)));
			clazz->addMethod (new Method ("getValidators", createMethodWrapper (&GtkForms::AbstractController::getValidators)));
			clazz->addMethod (new Method ("refresh", createMethodWrapper (&GtkForms::AbstractController::refresh)));
			clazz->addMethod (new Method ("submit", createMethodWrapper (&GtkForms::AbstractController::submit)));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&GtkForms::AbstractController::onStart)));
			clazz->addMethod (new Method ("onSubmit", createMethodWrapper (&GtkForms::AbstractController::onSubmit)));
			clazz->addMethod (new Method ("onStop", createMethodWrapper (&GtkForms::AbstractController::onStop)));
			clazz->addMethod (new Method ("getLoopDelayMs", createMethodWrapper (&GtkForms::AbstractController::getLoopDelayMs)));
			clazz->addMethod (new Method ("getLastMs", createMethodWrapper (&GtkForms::AbstractController::getLastMs)));
			clazz->addMethod (new Method ("performIdle", createMethodWrapper (&GtkForms::AbstractController::performIdle)));
			clazz->addMethod (new Method ("onQuit", createMethodWrapper (&GtkForms::AbstractController::onQuit)));
			clazz->addMethod (new Method ("onIdle", createMethodWrapper (&GtkForms::AbstractController::onIdle)));
			clazz->addMethod (new Method ("getViews", createMethodWrapper (&GtkForms::AbstractController::getViews)));
			clazz->addMethod (new Method ("addView", createMethodWrapper (&GtkForms::AbstractController::addView)));
			clazz->addMethod (new Method ("clearViews", createMethodWrapper (&GtkForms::AbstractController::clearViews)));
			clazz->addMethod (new Method ("getApp", createMethodWrapper (&GtkForms::AbstractController::getApp)));
		}
	}
	{
		Class *clazz = new Class ("AddNodeController", typeid (AddNodeController &), new Reflection::PtrDeleter <AddNodeController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <AddNodeController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("tools", Reflection::createFieldWrapper (&AddNodeController::tools)));
			clazz->addField (new Field ("mainController", Reflection::createFieldWrapper (&AddNodeController::mainController)));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&AddNodeController::onStart)));
			clazz->addMethod (new Method ("onSubmit", createMethodWrapper (&AddNodeController::onSubmit)));
			clazz->addMethod (new Method ("onRowActivated", createMethodWrapper (&AddNodeController::onRowActivated)));
			clazz->addMethod (new Method ("onRowSelected", createMethodWrapper (&AddNodeController::onRowSelected)));
			clazz->addMethod (new Method ("onOk", createMethodWrapper (&AddNodeController::onOk)));
		}
	}
	{
		Class *clazz = new Class ("TableFilterMapping", typeid (GtkForms::TableFilterMapping &), new Reflection::PtrDeleter <GtkForms::TableFilterMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::TableFilterMapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getColumnNumber", createMethodWrapper (&GtkForms::TableFilterMapping::getColumnNumber)));
			clazz->addMethod (new Method ("setColumnNumber", createMethodWrapper (&GtkForms::TableFilterMapping::setColumnNumber)));
		}
	}
	{
		Class *clazz = new Class ("AddNodeTableFilterMapping", typeid (AddNodeTableFilterMapping &), new Reflection::PtrDeleter <AddNodeTableFilterMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("TableFilterMapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <AddNodeTableFilterMapping, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("ConsoleBuffer", typeid (ConsoleBuffer &), new Reflection::PtrDeleter <ConsoleBuffer>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ConsoleBuffer, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getGtkTextBuffer", createMethodWrapper (&ConsoleBuffer::getGtkTextBuffer)));
			clazz->addMethod (new Method ("append", createMethodWrapper (&ConsoleBuffer::append)));
			clazz->addMethod (new Method ("clear", createMethodWrapper (&ConsoleBuffer::clear)));
		}
	}
	{
		Class *clazz = new Class ("BuilderView", typeid (GtkForms::BuilderView &), new Reflection::PtrDeleter <GtkForms::BuilderView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::BuilderView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("file", Reflection::createFieldWrapper (&GtkForms::BuilderView::file)));
			clazz->addField (new Field ("alsoLoad", Reflection::createFieldWrapper (&GtkForms::BuilderView::alsoLoad)));
			clazz->addField (new Field ("loadWholeFile", Reflection::createFieldWrapper (&GtkForms::BuilderView::loadWholeFile)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::BuilderView::loadUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::BuilderView::isLoaded)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::BuilderView::destroyUi)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::BuilderView::getUiOrThrow)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::BuilderView::connectSignals)));
		}
	}
	{
		Class *clazz = new Class ("IDataFileSave", typeid (IDataFileSave &), new Reflection::PtrDeleter <IDataFileSave>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("save", createMethodWrapper (&IDataFileSave::save)));
			clazz->addMethod (new Method ("onButton", createMethodWrapper (&IDataFileSave::onButton)));
			clazz->addMethod (new Method ("onCircle", createMethodWrapper (&IDataFileSave::onCircle)));
			clazz->addMethod (new Method ("onCircularNode", createMethodWrapper (&IDataFileSave::onCircularNode)));
			clazz->addMethod (new Method ("onLine", createMethodWrapper (&IDataFileSave::onLine)));
			clazz->addMethod (new Method ("onLineConnector", createMethodWrapper (&IDataFileSave::onLineConnector)));
			clazz->addMethod (new Method ("onConnector", createMethodWrapper (&IDataFileSave::onConnector)));
			clazz->addMethod (new Method ("onRectangle", createMethodWrapper (&IDataFileSave::onRectangle)));
		}
	}
	{
		Class *clazz = new Class ("Point", typeid (primitives::Point &), new Reflection::PtrDeleter <primitives::Point>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Point, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Point, float, float>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Point, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("x", Reflection::createFieldWrapper (&primitives::Point::x)));
			clazz->addField (new Field ("y", Reflection::createFieldWrapper (&primitives::Point::y)));
			clazz->addMethod (new Method ("isValid", createMethodWrapper (&primitives::Point::isValid)));
		}
	}
	{
		Class *clazz = new Class ("Dimension", typeid (primitives::Dimension &), new Reflection::PtrDeleter <primitives::Dimension>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Dimension, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Dimension, float, float>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <primitives::Dimension, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("width", Reflection::createFieldWrapper (&primitives::Dimension::width)));
			clazz->addField (new Field ("height", Reflection::createFieldWrapper (&primitives::Dimension::height)));
		}
	}
	{
		Class *clazz = new Class ("IClutterActor", typeid (IClutterActor &), new Reflection::PtrDeleter <IClutterActor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("setParent", createMethodWrapper (&IClutterActor::setParent)));
			clazz->addMethod (new Method ("getActor", createMethodWrapper (&IClutterActor::getActor)));
			clazz->addMethod (new Method ("isVisible", createMethodWrapper (&IClutterActor::isVisible)));
			clazz->addMethod (new Method ("setVisible", createMethodWrapper (&IClutterActor::setVisible)));
			clazz->addMethod (new Method ("isSelectable", createMethodWrapper (&IClutterActor::isSelectable)));
			clazz->addMethod (new Method ("setSelectable", createMethodWrapper (&IClutterActor::setSelectable)));
			clazz->addMethod (new Method ("isReactive", createMethodWrapper (&IClutterActor::isReactive)));
			clazz->addMethod (new Method ("setReactive", createMethodWrapper (&IClutterActor::setReactive)));
			clazz->addMethod (new Method ("setPosition", createMethodWrapper (&IClutterActor::setPosition)));
			clazz->addMethod (new Method ("move", createMethodWrapper (&IClutterActor::move)));
			clazz->addMethod (new Method ("getPosition", createMethodWrapper (&IClutterActor::getPosition)));
			clazz->addMethod (new Method ("getScaleLayerPosition", createMethodWrapper (&IClutterActor::getScaleLayerPosition)));
			clazz->addMethod (new Method ("setSize", createMethodWrapper (&IClutterActor::setSize)));
			clazz->addMethod (new Method ("getSize", createMethodWrapper (&IClutterActor::getSize)));
			clazz->addMethod (new Method ("isFill", createMethodWrapper (&IClutterActor::isFill)));
			clazz->addMethod (new Method ("setFill", createMethodWrapper (&IClutterActor::setFill)));
			clazz->addMethod (new Method ("getStrokeWidth", createMethodWrapper (&IClutterActor::getStrokeWidth)));
			clazz->addMethod (new Method ("setStrokeWidth", createMethodWrapper (&IClutterActor::setStrokeWidth)));
			clazz->addMethod (new Method ("getStrokeDash", createMethodWrapper (&IClutterActor::getStrokeDash)));
			clazz->addMethod (new Method ("setStrokeDash", createMethodWrapper (&IClutterActor::setStrokeDash)));
			clazz->addMethod (new Method ("getStrokeColor", createMethodWrapper (&IClutterActor::getStrokeColor)));
			clazz->addMethod (new Method ("setStrokeColor", createMethodWrapper (&IClutterActor::setStrokeColor)));
			clazz->addMethod (new Method ("getFillColor", createMethodWrapper (&IClutterActor::getFillColor)));
			clazz->addMethod (new Method ("setFillColor", createMethodWrapper (&IClutterActor::setFillColor)));
			clazz->addMethod (new Method ("isContainter", createMethodWrapper (&IClutterActor::isContainter)));
			clazz->addMethod (new Method ("getBoundingBox", createMethodWrapper (&IClutterActor::getBoundingBox)));
			clazz->addMethod (new Method ("convertToScaleLayer", createMethodWrapper (&IClutterActor::convertToScaleLayer)));
			clazz->addMethod (new Method ("getPropertyViews", createMethodWrapper (&IClutterActor::getPropertyViews)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&IClutterActor::visit)));
			clazz->addMethod (new Method ("getId", createMethodWrapper (&IClutterActor::getId)));
		}
	}
	{
		Class *clazz = new Class ("ClutterActorVector", typeid (ClutterActorVector&), new PtrDeleter <ClutterActorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <ClutterActorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <ClutterActorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <ClutterActorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <ClutterActorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <ClutterActorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("IDrawingEventHandler", typeid (IDrawingEventHandler &), new Reflection::PtrDeleter <IDrawingEventHandler>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("pushMessage", createMethodWrapper (&IDrawingEventHandler::pushMessage)));
		}
	}
	{
		Class *clazz = new Class ("AbstractActor", typeid (AbstractActor &), new Reflection::PtrDeleter <AbstractActor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IClutterActor");
			clazz->addField (new Field ("stagePrev", Reflection::createFieldWrapper (&AbstractActor::stagePrev)));
			clazz->addField (new Field ("parentPrev", Reflection::createFieldWrapper (&AbstractActor::parentPrev)));
			clazz->addMethod (new Method ("init", createMethodWrapper (&AbstractActor::init)));
			clazz->addMethod (new Method ("setParent", createMethodWrapper (&AbstractActor::setParent)));
			clazz->addMethod (new Method ("getActor", createMethodWrapper (&AbstractActor::getActor)));
			clazz->addMethod (new Method ("isVisible", createMethodWrapper (&AbstractActor::isVisible)));
			clazz->addMethod (new Method ("setVisible", createMethodWrapper (&AbstractActor::setVisible)));
			clazz->addMethod (new Method ("isSelectable", createMethodWrapper (&AbstractActor::isSelectable)));
			clazz->addMethod (new Method ("setSelectable", createMethodWrapper (&AbstractActor::setSelectable)));
			clazz->addMethod (new Method ("isReactive", createMethodWrapper (&AbstractActor::isReactive)));
			clazz->addMethod (new Method ("setReactive", createMethodWrapper (&AbstractActor::setReactive)));
			clazz->addMethod (new Method ("isRouting", createMethodWrapper (&AbstractActor::isRouting)));
			clazz->addMethod (new Method ("setRouting", createMethodWrapper (&AbstractActor::setRouting)));
			clazz->addMethod (new Method ("setPosition", createMethodWrapper (&AbstractActor::setPosition)));
			clazz->addMethod (new Method ("move", createMethodWrapper (&AbstractActor::move)));
			clazz->addMethod (new Method ("getPosition", createMethodWrapper (&AbstractActor::getPosition)));
			clazz->addMethod (new Method ("getScaleLayerPosition", createMethodWrapper (&AbstractActor::getScaleLayerPosition)));
			clazz->addMethod (new Method ("setSize", createMethodWrapper (&AbstractActor::setSize)));
			clazz->addMethod (new Method ("getSize", createMethodWrapper (&AbstractActor::getSize)));
			clazz->addMethod (new Method ("isFill", createMethodWrapper (&AbstractActor::isFill)));
			clazz->addMethod (new Method ("setFill", createMethodWrapper (&AbstractActor::setFill)));
			clazz->addMethod (new Method ("getStrokeWidth", createMethodWrapper (&AbstractActor::getStrokeWidth)));
			clazz->addMethod (new Method ("setStrokeWidth", createMethodWrapper (&AbstractActor::setStrokeWidth)));
			clazz->addMethod (new Method ("getStrokeDash", createMethodWrapper (&AbstractActor::getStrokeDash)));
			clazz->addMethod (new Method ("setStrokeDash", createMethodWrapper (&AbstractActor::setStrokeDash)));
			clazz->addMethod (new Method ("getStrokeColor", createMethodWrapper (&AbstractActor::getStrokeColor)));
			clazz->addMethod (new Method ("setStrokeColor", createMethodWrapper (&AbstractActor::setStrokeColor)));
			clazz->addMethod (new Method ("getFillColor", createMethodWrapper (&AbstractActor::getFillColor)));
			clazz->addMethod (new Method ("setFillColor", createMethodWrapper (&AbstractActor::setFillColor)));
			clazz->addMethod (new Method ("getBoundingBox", createMethodWrapper (&AbstractActor::getBoundingBox)));
			clazz->addMethod (new Method ("isContainter", createMethodWrapper (&AbstractActor::isContainter)));
			clazz->addMethod (new Method ("convertToScaleLayer", createMethodWrapper (&AbstractActor::convertToScaleLayer)));
			clazz->addMethod (new Method ("setCppImplementation", createMethodWrapper (&AbstractActor::setCppImplementation)));
			clazz->addMethod (new Method ("getEventHandler", createMethodWrapper (&AbstractActor::getEventHandler)));
			clazz->addMethod (new Method ("setEventHandler", createMethodWrapper (&AbstractActor::setEventHandler)));
			clazz->addMethod (new Method ("setPropertyView", createMethodWrapper (&AbstractActor::setPropertyView)));
			clazz->addMethod (new Method ("isConnectSignals", createMethodWrapper (&AbstractActor::isConnectSignals)));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&AbstractActor::onButtonPress)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&AbstractActor::onButtonRelease)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&AbstractActor::onMotion)));
			clazz->addMethod (new Method ("onEnter", createMethodWrapper (&AbstractActor::onEnter)));
			clazz->addMethod (new Method ("onLeave", createMethodWrapper (&AbstractActor::onLeave)));
			clazz->addMethod (new Method ("onScroll", createMethodWrapper (&AbstractActor::onScroll)));
			clazz->addMethod (new Method ("onKeyPress", createMethodWrapper (&AbstractActor::onKeyPress)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&AbstractActor::contId)));
			clazz->addMethod (new Method ("getId", createMethodWrapper (&AbstractActor::getId)));
		}
	}
	{
		Class *clazz = new Class ("Stage", typeid (Stage &), new Reflection::PtrDeleter <Stage>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Stage, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getClutterWidget", createMethodWrapper (&Stage::getClutterWidget)));
			clazz->addMethod (new Method ("setParent", createMethodWrapper (&Stage::setParent)));
			clazz->addMethod (new Method ("isFill", createMethodWrapper (&Stage::isFill)));
			clazz->addMethod (new Method ("setFill", createMethodWrapper (&Stage::setFill)));
			clazz->addMethod (new Method ("getStrokeWidth", createMethodWrapper (&Stage::getStrokeWidth)));
			clazz->addMethod (new Method ("setStrokeWidth", createMethodWrapper (&Stage::setStrokeWidth)));
			clazz->addMethod (new Method ("getStrokeDash", createMethodWrapper (&Stage::getStrokeDash)));
			clazz->addMethod (new Method ("setStrokeDash", createMethodWrapper (&Stage::setStrokeDash)));
			clazz->addMethod (new Method ("getStrokeColor", createMethodWrapper (&Stage::getStrokeColor)));
			clazz->addMethod (new Method ("setStrokeColor", createMethodWrapper (&Stage::setStrokeColor)));
			clazz->addMethod (new Method ("getFillColor", createMethodWrapper (&Stage::getFillColor)));
			clazz->addMethod (new Method ("setFillColor", createMethodWrapper (&Stage::setFillColor)));
			clazz->addMethod (new Method ("isSelectable", createMethodWrapper (&Stage::isSelectable)));
			clazz->addMethod (new Method ("getScaleLayer", createMethodWrapper (&Stage::getScaleLayer)));
			clazz->addMethod (new Method ("setScaleLayer", createMethodWrapper (&Stage::setScaleLayer)));
			clazz->addMethod (new Method ("isConnectSignals", createMethodWrapper (&Stage::isConnectSignals)));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&Stage::onButtonPress)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&Stage::onButtonRelease)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&Stage::onMotion)));
			clazz->addMethod (new Method ("onScroll", createMethodWrapper (&Stage::onScroll)));
			clazz->addMethod (new Method ("onKeyPress", createMethodWrapper (&Stage::onKeyPress)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Stage::visit)));
		}
	}
	{
		Class *clazz = new Class ("ConsoleView", typeid (ConsoleView &), new Reflection::PtrDeleter <ConsoleView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("BuilderView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ConsoleView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("console", Reflection::createFieldWrapper (&ConsoleView::console)));
			clazz->addField (new Field ("autoScroll", Reflection::createFieldWrapper (&ConsoleView::autoScroll)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&ConsoleView::loadUi)));
		}
	}
	{
		Class *clazz = new Class ("ConsoleController", typeid (ConsoleController &), new Reflection::PtrDeleter <ConsoleController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ConsoleController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("console", Reflection::createFieldWrapper (&ConsoleController::console)));
			clazz->addField (new Field ("consoleView", Reflection::createFieldWrapper (&ConsoleController::consoleView)));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&ConsoleController::onStart)));
			clazz->addMethod (new Method ("onClear", createMethodWrapper (&ConsoleController::onClear)));
		}
	}
	{
		Class *clazz = new Class ("IFactoryStrategy", typeid (IFactoryStrategy &), new Reflection::PtrDeleter <IFactoryStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
		}
	}
	{
		Class *clazz = new Class ("Program", typeid (flow::Program &), new Reflection::PtrDeleter <flow::Program>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <flow::Program, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("removeNode", createMethodWrapper (&flow::Program::removeNode)));
			clazz->addMethod (new Method ("addNode", createMethodWrapper (&flow::Program::addNode)));
			clazz->addMethod (new Method ("run", createMethodWrapper (&flow::Program::run)));
			clazz->addMethod (new Method ("step", createMethodWrapper (&flow::Program::step)));
			clazz->addMethod (new Method ("reset", createMethodWrapper (&flow::Program::reset)));
		}
	}
	{
		Class *clazz = new Class ("ContainerFactoryStrategy", typeid (ContainerFactoryStrategy &), new Reflection::PtrDeleter <ContainerFactoryStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactoryStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ContainerFactoryStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getBeanName", createMethodWrapper (&ContainerFactoryStrategy::getBeanName)));
			clazz->addMethod (new Method ("setBeanName", createMethodWrapper (&ContainerFactoryStrategy::setBeanName)));
			clazz->addMethod (new Method ("getContainer", createMethodWrapper (&ContainerFactoryStrategy::getContainer)));
			clazz->addMethod (new Method ("setContainer", createMethodWrapper (&ContainerFactoryStrategy::setContainer)));
		}
	}
	{
		Class *clazz = new Class ("NodeContainerFactoryStrategy", typeid (NodeContainerFactoryStrategy &), new Reflection::PtrDeleter <NodeContainerFactoryStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("ContainerFactoryStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <NodeContainerFactoryStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getProgram", createMethodWrapper (&NodeContainerFactoryStrategy::getProgram)));
			clazz->addMethod (new Method ("setProgram", createMethodWrapper (&NodeContainerFactoryStrategy::setProgram)));
		}
	}
	{
		Class *clazz = new Class ("IDrawStrategy", typeid (IDrawStrategy &), new Reflection::PtrDeleter <IDrawStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&IDrawStrategy::onButtonPress)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&IDrawStrategy::onMotion)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&IDrawStrategy::onButtonRelease)));
			clazz->addMethod (new Method ("onObjectCreated", createMethodWrapper (&IDrawStrategy::onObjectCreated)));
		}
	}
	{
		Class *clazz = new Class ("Line", typeid (Line &), new Reflection::PtrDeleter <Line>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Line, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("setPointA", createMethodWrapper (&Line::setPointA)));
			clazz->addMethod (new Method ("getPointA", createMethodWrapper (&Line::getPointA)));
			clazz->addMethod (new Method ("setPointB", createMethodWrapper (&Line::setPointB)));
			clazz->addMethod (new Method ("getPointB", createMethodWrapper (&Line::getPointB)));
			clazz->addMethod (new Method ("getText", createMethodWrapper (&Line::getText)));
			clazz->addMethod (new Method ("setText", createMethodWrapper (&Line::setText)));
			clazz->addMethod (new Method ("getFont", createMethodWrapper (&Line::getFont)));
			clazz->addMethod (new Method ("setFont", createMethodWrapper (&Line::setFont)));
			clazz->addMethod (new Method ("getFontColor", createMethodWrapper (&Line::getFontColor)));
			clazz->addMethod (new Method ("setFontColor", createMethodWrapper (&Line::setFontColor)));
			clazz->addMethod (new Method ("isTextEditable", createMethodWrapper (&Line::isTextEditable)));
			clazz->addMethod (new Method ("setTextEditable", createMethodWrapper (&Line::setTextEditable)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Line::visit)));
		}
	}
	{
		Class *clazz = new Class ("DashedLineConnectorStrategy", typeid (DashedLineConnectorStrategy &), new Reflection::PtrDeleter <DashedLineConnectorStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IDrawStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <DashedLineConnectorStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&DashedLineConnectorStrategy::onButtonPress)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&DashedLineConnectorStrategy::onMotion)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&DashedLineConnectorStrategy::onButtonRelease)));
			clazz->addMethod (new Method ("onObjectCreated", createMethodWrapper (&DashedLineConnectorStrategy::onObjectCreated)));
			clazz->addMethod (new Method ("getLine", createMethodWrapper (&DashedLineConnectorStrategy::getLine)));
			clazz->addMethod (new Method ("setLine", createMethodWrapper (&DashedLineConnectorStrategy::setLine)));
		}
	}
	{
		Class *clazz = new Class ("DashedLineStrategy", typeid (DashedLineStrategy &), new Reflection::PtrDeleter <DashedLineStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IDrawStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <DashedLineStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&DashedLineStrategy::onButtonPress)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&DashedLineStrategy::onMotion)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&DashedLineStrategy::onButtonRelease)));
			clazz->addMethod (new Method ("onObjectCreated", createMethodWrapper (&DashedLineStrategy::onObjectCreated)));
			clazz->addMethod (new Method ("getLine", createMethodWrapper (&DashedLineStrategy::getLine)));
			clazz->addMethod (new Method ("setLine", createMethodWrapper (&DashedLineStrategy::setLine)));
		}
	}
	{
		Class *clazz = new Class ("ISelectorStrategy", typeid (ISelectorStrategy &), new Reflection::PtrDeleter <ISelectorStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getSelectedActors", createMethodWrapper (&ISelectorStrategy::getSelectedActors)));
			clazz->addMethod (new Method ("setSelectedActors", createMethodWrapper (&ISelectorStrategy::setSelectedActors)));
			clazz->addMethod (new Method ("unselectAll", createMethodWrapper (&ISelectorStrategy::unselectAll)));
			clazz->addMethod (new Method ("getScaleLayer", createMethodWrapper (&ISelectorStrategy::getScaleLayer)));
			clazz->addMethod (new Method ("setScaleLayer", createMethodWrapper (&ISelectorStrategy::setScaleLayer)));
		}
	}
	{
		Class *clazz = new Class ("MainController", typeid (MainController &), new Reflection::PtrDeleter <MainController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addBaseClassName ("IDrawingEventHandler");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <MainController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&MainController::init)));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&MainController::onStart)));
			clazz->addMethod (new Method ("onSubmit", createMethodWrapper (&MainController::onSubmit)));
			clazz->addMethod (new Method ("onIdle", createMethodWrapper (&MainController::onIdle)));
			clazz->addMethod (new Method ("onStop", createMethodWrapper (&MainController::onStop)));
			clazz->addMethod (new Method ("onNewNodeToolClicked", createMethodWrapper (&MainController::onNewNodeToolClicked)));
			clazz->addMethod (new Method ("onZoom", createMethodWrapper (&MainController::onZoom)));
			clazz->addMethod (new Method ("onProgramRun", createMethodWrapper (&MainController::onProgramRun)));
			clazz->addMethod (new Method ("onProgramStep", createMethodWrapper (&MainController::onProgramStep)));
			clazz->addMethod (new Method ("onProgramStop", createMethodWrapper (&MainController::onProgramStop)));
			clazz->addMethod (new Method ("pushMessage", createMethodWrapper (&MainController::pushMessage)));
			clazz->addMethod (new Method ("getToolContainer", createMethodWrapper (&MainController::getToolContainer)));
			clazz->addMethod (new Method ("setToolContainer", createMethodWrapper (&MainController::setToolContainer)));
			clazz->addMethod (new Method ("getProgram", createMethodWrapper (&MainController::getProgram)));
			clazz->addMethod (new Method ("setProgram", createMethodWrapper (&MainController::setProgram)));
			clazz->addMethod (new Method ("getRectangularSelector", createMethodWrapper (&MainController::getRectangularSelector)));
			clazz->addMethod (new Method ("setRectangularSelector", createMethodWrapper (&MainController::setRectangularSelector)));
			clazz->addMethod (new Method ("getSelectedActors", createMethodWrapper (&MainController::getSelectedActors)));
			clazz->addMethod (new Method ("setSelectedActors", createMethodWrapper (&MainController::setSelectedActors)));
			clazz->addMethod (new Method ("getStage", createMethodWrapper (&MainController::getStage)));
			clazz->addMethod (new Method ("setStage", createMethodWrapper (&MainController::setStage)));
			clazz->addMethod (new Method ("getPropertiesController", createMethodWrapper (&MainController::getPropertiesController)));
			clazz->addMethod (new Method ("setPropertiesController", createMethodWrapper (&MainController::setPropertiesController)));
			clazz->addMethod (new Method ("setSceneApi", createMethodWrapper (&MainController::setSceneApi)));
			clazz->addMethod (new Method ("onKeyPress", createMethodWrapper (&MainController::onKeyPress)));
			clazz->addMethod (new Method ("onSelection", createMethodWrapper (&MainController::onSelection)));
		}
	}
	{
		Class *clazz = new Class ("MainView", typeid (MainView &), new Reflection::PtrDeleter <MainView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("BuilderView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <MainView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&MainView::loadUi)));
			clazz->addMethod (new Method ("getStage", createMethodWrapper (&MainView::getStage)));
			clazz->addMethod (new Method ("setStage", createMethodWrapper (&MainView::setStage)));
		}
	}
	{
		Class *clazz = new Class ("Circle", typeid (Circle &), new Reflection::PtrDeleter <Circle>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Circle, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Circle::visit)));
		}
	}
	{
		Class *clazz = new Class ("ShapeDrawStrategy", typeid (ShapeDrawStrategy &), new Reflection::PtrDeleter <ShapeDrawStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IDrawStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ShapeDrawStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&ShapeDrawStrategy::onButtonPress)));
			clazz->addMethod (new Method ("onMotion", createMethodWrapper (&ShapeDrawStrategy::onMotion)));
			clazz->addMethod (new Method ("onButtonRelease", createMethodWrapper (&ShapeDrawStrategy::onButtonRelease)));
			clazz->addMethod (new Method ("onObjectCreated", createMethodWrapper (&ShapeDrawStrategy::onObjectCreated)));
			clazz->addMethod (new Method ("getActor", createMethodWrapper (&ShapeDrawStrategy::getActor)));
			clazz->addMethod (new Method ("setActor", createMethodWrapper (&ShapeDrawStrategy::setActor)));
			clazz->addMethod (new Method ("getMinSize", createMethodWrapper (&ShapeDrawStrategy::getMinSize)));
			clazz->addMethod (new Method ("setMinSize", createMethodWrapper (&ShapeDrawStrategy::setMinSize)));
			clazz->addMethod (new Method ("getMaxSize", createMethodWrapper (&ShapeDrawStrategy::getMaxSize)));
			clazz->addMethod (new Method ("setMaxSize", createMethodWrapper (&ShapeDrawStrategy::setMaxSize)));
		}
	}
	{
		Class *clazz = new Class ("RectangularSelectorStrategy", typeid (RectangularSelectorStrategy &), new Reflection::PtrDeleter <RectangularSelectorStrategy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("ShapeDrawStrategy");
			clazz->addBaseClassName ("ISelectorStrategy");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <RectangularSelectorStrategy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onButtonPress", createMethodWrapper (&RectangularSelectorStrategy::onButtonPress)));
			clazz->addMethod (new Method ("getRectangularSelector", createMethodWrapper (&RectangularSelectorStrategy::getRectangularSelector)));
			clazz->addMethod (new Method ("setRectangularSelector", createMethodWrapper (&RectangularSelectorStrategy::setRectangularSelector)));
			clazz->addMethod (new Method ("getSelectedActors", createMethodWrapper (&RectangularSelectorStrategy::getSelectedActors)));
			clazz->addMethod (new Method ("setSelectedActors", createMethodWrapper (&RectangularSelectorStrategy::setSelectedActors)));
			clazz->addMethod (new Method ("unselectAll", createMethodWrapper (&RectangularSelectorStrategy::unselectAll)));
			clazz->addMethod (new Method ("getScaleLayer", createMethodWrapper (&RectangularSelectorStrategy::getScaleLayer)));
			clazz->addMethod (new Method ("setScaleLayer", createMethodWrapper (&RectangularSelectorStrategy::setScaleLayer)));
		}
	}
	{
		Class *clazz = new Class ("DoubleToFloatEditor", typeid (DoubleToFloatEditor &), new Reflection::PtrDeleter <DoubleToFloatEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IEditor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <DoubleToFloatEditor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("convert", createMethodWrapper (&DoubleToFloatEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("PropertiesController", typeid (PropertiesController &), new Reflection::PtrDeleter <PropertiesController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <PropertiesController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&PropertiesController::onStart)));
			clazz->addMethod (new Method ("onSelection", createMethodWrapper (&PropertiesController::onSelection)));
		}
	}
	{
		Class *clazz = new Class ("IDataFileLoad", typeid (IDataFileLoad &), new Reflection::PtrDeleter <IDataFileLoad>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("load", createMethodWrapper (&IDataFileLoad::load)));
		}
	}
	{
		Class *clazz = new Class ("NativeXmlFormatLoad", typeid (NativeXmlFormatLoad &), new Reflection::PtrDeleter <NativeXmlFormatLoad>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IDataFileLoad");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <NativeXmlFormatLoad, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("load", createMethodWrapper (&NativeXmlFormatLoad::load)));
			clazz->addMethod (new Method ("setSceneApi", createMethodWrapper (&NativeXmlFormatLoad::setSceneApi)));
			clazz->addMethod (new Method ("setWrapper", createMethodWrapper (&NativeXmlFormatLoad::setWrapper)));
		}
	}
	{
		Class *clazz = new Class ("NativeXmlFormatSave", typeid (NativeXmlFormatSave &), new Reflection::PtrDeleter <NativeXmlFormatSave>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IDataFileSave");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <NativeXmlFormatSave, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("load", createMethodWrapper (&NativeXmlFormatSave::load)));
			clazz->addMethod (new Method ("save", createMethodWrapper (&NativeXmlFormatSave::save)));
			clazz->addMethod (new Method ("onButton", createMethodWrapper (&NativeXmlFormatSave::onButton)));
			clazz->addMethod (new Method ("onCircle", createMethodWrapper (&NativeXmlFormatSave::onCircle)));
			clazz->addMethod (new Method ("onCircularNode", createMethodWrapper (&NativeXmlFormatSave::onCircularNode)));
			clazz->addMethod (new Method ("onLine", createMethodWrapper (&NativeXmlFormatSave::onLine)));
			clazz->addMethod (new Method ("onLineConnector", createMethodWrapper (&NativeXmlFormatSave::onLineConnector)));
			clazz->addMethod (new Method ("onConnector", createMethodWrapper (&NativeXmlFormatSave::onConnector)));
			clazz->addMethod (new Method ("onRectangle", createMethodWrapper (&NativeXmlFormatSave::onRectangle)));
			clazz->addMethod (new Method ("setSceneApi", createMethodWrapper (&NativeXmlFormatSave::setSceneApi)));
		}
	}
	{
		Class *clazz = new Class ("OpenFileController", typeid (OpenFileController &), new Reflection::PtrDeleter <OpenFileController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <OpenFileController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&OpenFileController::onStart)));
			clazz->addMethod (new Method ("onResponse", createMethodWrapper (&OpenFileController::onResponse)));
			clazz->addMethod (new Method ("setLoadFile", createMethodWrapper (&OpenFileController::setLoadFile)));
		}
	}
	{
		Class *clazz = new Class ("SaveFileController", typeid (SaveFileController &), new Reflection::PtrDeleter <SaveFileController>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractController");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <SaveFileController, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("onStart", createMethodWrapper (&SaveFileController::onStart)));
			clazz->addMethod (new Method ("onResponse", createMethodWrapper (&SaveFileController::onResponse)));
			clazz->addMethod (new Method ("setDataFile", createMethodWrapper (&SaveFileController::setDataFile)));
		}
	}
	{
		Class *clazz = new Class ("ColorMapping", typeid (ColorMapping &), new Reflection::PtrDeleter <ColorMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Mapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ColorMapping, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("Port", typeid (Port &), new Reflection::PtrDeleter <Port>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("angle", Reflection::createFieldWrapper (&Port::angle)));
			clazz->addField (new Field ("size", Reflection::createFieldWrapper (&Port::size)));
			clazz->addField (new Field ("color", Reflection::createFieldWrapper (&Port::color)));
			clazz->addMethod (new Method ("isInput", createMethodWrapper (&Port::isInput)));
			clazz->addMethod (new Method ("getNodeView", createMethodWrapper (&Port::getNodeView)));
			clazz->addMethod (new Method ("setNodeView", createMethodWrapper (&Port::setNodeView)));
			clazz->addMethod (new Method ("getProgramNumber", createMethodWrapper (&Port::getProgramNumber)));
			clazz->addMethod (new Method ("setProgramNumber", createMethodWrapper (&Port::setProgramNumber)));
			clazz->addMethod (new Method ("getViewNumber", createMethodWrapper (&Port::getViewNumber)));
			clazz->addMethod (new Method ("setViewNumber", createMethodWrapper (&Port::setViewNumber)));
			clazz->addMethod (new Method ("createPin", createMethodWrapper (&Port::createPin)));
			clazz->addMethod (new Method ("getShapeRef", createMethodWrapper (&Port::getShapeRef)));
		}
	}
	{
		Class *clazz = new Class ("InputPort", typeid (InputPort &), new Reflection::PtrDeleter <InputPort>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Port");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <InputPort, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isInput", createMethodWrapper (&InputPort::isInput)));
		}
	}
	{
		Class *clazz = new Class ("OutputPort", typeid (OutputPort &), new Reflection::PtrDeleter <OutputPort>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Port");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <OutputPort, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isInput", createMethodWrapper (&OutputPort::isInput)));
		}
	}
	{
		Class *clazz = new Class ("PortVector", typeid (PortVector&), new PtrDeleter <PortVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <PortVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <PortVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <PortVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <PortVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <PortVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("INodeView", typeid (INodeView &), new Reflection::PtrDeleter <INodeView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getNode", createMethodWrapper (&INodeView::getNode)));
			clazz->addMethod (new Method ("setNode", createMethodWrapper (&INodeView::setNode)));
			clazz->addMethod (new Method ("getPorts", createMethodWrapper (&INodeView::getPorts)));
			clazz->addMethod (new Method ("getPortPosition", createMethodWrapper (&INodeView::getPortPosition)));
		}
	}
	{
		Class *clazz = new Class ("AbstractNodeView", typeid (AbstractNodeView &), new Reflection::PtrDeleter <AbstractNodeView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("INodeView");
			clazz->addMethod (new Method ("glueInit", createMethodWrapper (&AbstractNodeView::glueInit)));
			clazz->addMethod (new Method ("getNode", createMethodWrapper (&AbstractNodeView::getNode)));
			clazz->addMethod (new Method ("setNode", createMethodWrapper (&AbstractNodeView::setNode)));
			clazz->addMethod (new Method ("getPorts", createMethodWrapper (&AbstractNodeView::getPorts)));
		}
	}
	{
		Class *clazz = new Class ("Button", typeid (Button &), new Reflection::PtrDeleter <Button>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addBaseClassName ("AbstractNodeView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Button, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&Button::init)));
			clazz->addMethod (new Method ("getText", createMethodWrapper (&Button::getText)));
			clazz->addMethod (new Method ("setText", createMethodWrapper (&Button::setText)));
			clazz->addMethod (new Method ("getFont", createMethodWrapper (&Button::getFont)));
			clazz->addMethod (new Method ("setFont", createMethodWrapper (&Button::setFont)));
			clazz->addMethod (new Method ("getFontColor", createMethodWrapper (&Button::getFontColor)));
			clazz->addMethod (new Method ("setFontColor", createMethodWrapper (&Button::setFontColor)));
			clazz->addMethod (new Method ("setNode", createMethodWrapper (&Button::setNode)));
			clazz->addMethod (new Method ("onPress", createMethodWrapper (&Button::onPress)));
			clazz->addMethod (new Method ("onRelease", createMethodWrapper (&Button::onRelease)));
			clazz->addMethod (new Method ("getPortPosition", createMethodWrapper (&Button::getPortPosition)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Button::visit)));
		}
	}
	{
		Class *clazz = new Class ("CircularNode", typeid (CircularNode &), new Reflection::PtrDeleter <CircularNode>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addBaseClassName ("AbstractNodeView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <CircularNode, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&CircularNode::init)));
			clazz->addMethod (new Method ("isFill", createMethodWrapper (&CircularNode::isFill)));
			clazz->addMethod (new Method ("setFill", createMethodWrapper (&CircularNode::setFill)));
			clazz->addMethod (new Method ("getStrokeWidth", createMethodWrapper (&CircularNode::getStrokeWidth)));
			clazz->addMethod (new Method ("setStrokeWidth", createMethodWrapper (&CircularNode::setStrokeWidth)));
			clazz->addMethod (new Method ("getStrokeDash", createMethodWrapper (&CircularNode::getStrokeDash)));
			clazz->addMethod (new Method ("setStrokeDash", createMethodWrapper (&CircularNode::setStrokeDash)));
			clazz->addMethod (new Method ("getStrokeColor", createMethodWrapper (&CircularNode::getStrokeColor)));
			clazz->addMethod (new Method ("setStrokeColor", createMethodWrapper (&CircularNode::setStrokeColor)));
			clazz->addMethod (new Method ("getFillColor", createMethodWrapper (&CircularNode::getFillColor)));
			clazz->addMethod (new Method ("setFillColor", createMethodWrapper (&CircularNode::setFillColor)));
			clazz->addMethod (new Method ("getText", createMethodWrapper (&CircularNode::getText)));
			clazz->addMethod (new Method ("setText", createMethodWrapper (&CircularNode::setText)));
			clazz->addMethod (new Method ("getFont", createMethodWrapper (&CircularNode::getFont)));
			clazz->addMethod (new Method ("setFont", createMethodWrapper (&CircularNode::setFont)));
			clazz->addMethod (new Method ("getFontColor", createMethodWrapper (&CircularNode::getFontColor)));
			clazz->addMethod (new Method ("setFontColor", createMethodWrapper (&CircularNode::setFontColor)));
			clazz->addMethod (new Method ("isTextEditable", createMethodWrapper (&CircularNode::isTextEditable)));
			clazz->addMethod (new Method ("setTextEditable", createMethodWrapper (&CircularNode::setTextEditable)));
			clazz->addMethod (new Method ("getPortPosition", createMethodWrapper (&CircularNode::getPortPosition)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&CircularNode::visit)));
		}
	}
	{
		Class *clazz = new Class ("IArcView", typeid (IArcView &), new Reflection::PtrDeleter <IArcView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getArc", createMethodWrapper (&IArcView::getArc)));
			clazz->addMethod (new Method ("setArc", createMethodWrapper (&IArcView::setArc)));
		}
	}
	{
		Class *clazz = new Class ("AbstractArcView", typeid (AbstractArcView &), new Reflection::PtrDeleter <AbstractArcView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IArcView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <AbstractArcView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getArc", createMethodWrapper (&AbstractArcView::getArc)));
			clazz->addMethod (new Method ("setArc", createMethodWrapper (&AbstractArcView::setArc)));
		}
	}
	{
		Class *clazz = new Class ("IConnector", typeid (IConnector &), new Reflection::PtrDeleter <IConnector>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("connect", createMethodWrapper (&IConnector::connect)));
			clazz->addMethod (new Method ("disconnect", createMethodWrapper (&IConnector::disconnect)));
			clazz->addMethod (new Method ("onReroute", createMethodWrapper (&IConnector::onReroute)));
		}
	}
	{
		Class *clazz = new Class ("AbstractConnector", typeid (AbstractConnector &), new Reflection::PtrDeleter <AbstractConnector>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IConnector");
			clazz->addMethod (new Method ("connect", createMethodWrapper (&AbstractConnector::connect)));
			clazz->addMethod (new Method ("disconnect", createMethodWrapper (&AbstractConnector::disconnect)));
		}
	}
	{
		Class *clazz = new Class ("Connector", typeid (Connector &), new Reflection::PtrDeleter <Connector>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addBaseClassName ("AbstractConnector");
			clazz->addBaseClassName ("AbstractArcView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Connector, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("setParent", createMethodWrapper (&Connector::setParent)));
			clazz->addMethod (new Method ("getText", createMethodWrapper (&Connector::getText)));
			clazz->addMethod (new Method ("setText", createMethodWrapper (&Connector::setText)));
			clazz->addMethod (new Method ("getFont", createMethodWrapper (&Connector::getFont)));
			clazz->addMethod (new Method ("setFont", createMethodWrapper (&Connector::setFont)));
			clazz->addMethod (new Method ("getFontColor", createMethodWrapper (&Connector::getFontColor)));
			clazz->addMethod (new Method ("setFontColor", createMethodWrapper (&Connector::setFontColor)));
			clazz->addMethod (new Method ("isTextEditable", createMethodWrapper (&Connector::isTextEditable)));
			clazz->addMethod (new Method ("setTextEditable", createMethodWrapper (&Connector::setTextEditable)));
			clazz->addMethod (new Method ("onReroute", createMethodWrapper (&Connector::onReroute)));
			clazz->addMethod (new Method ("onTextChanged", createMethodWrapper (&Connector::onTextChanged)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Connector::visit)));
		}
	}
	{
		Class *clazz = new Class ("Rect", typeid (Rect &), new Reflection::PtrDeleter <Rect>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Rect, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&Rect::visit)));
		}
	}
	{
		Class *clazz = new Class ("RectangularSelector", typeid (RectangularSelector &), new Reflection::PtrDeleter <RectangularSelector>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Rect");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <RectangularSelector, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("ScaleLayer", typeid (ScaleLayer &), new Reflection::PtrDeleter <ScaleLayer>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractActor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <ScaleLayer, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("isContainter", createMethodWrapper (&ScaleLayer::isContainter)));
			clazz->addMethod (new Method ("isSelectable", createMethodWrapper (&ScaleLayer::isSelectable)));
			clazz->addMethod (new Method ("zoomIn", createMethodWrapper (&ScaleLayer::zoomIn)));
			clazz->addMethod (new Method ("zoomOut", createMethodWrapper (&ScaleLayer::zoomOut)));
			clazz->addMethod (new Method ("zoom", createMethodWrapper (&ScaleLayer::zoom)));
			clazz->addMethod (new Method ("pan", createMethodWrapper (&ScaleLayer::pan)));
			clazz->addMethod (new Method ("isFill", createMethodWrapper (&ScaleLayer::isFill)));
			clazz->addMethod (new Method ("setFill", createMethodWrapper (&ScaleLayer::setFill)));
			clazz->addMethod (new Method ("getStrokeWidth", createMethodWrapper (&ScaleLayer::getStrokeWidth)));
			clazz->addMethod (new Method ("setStrokeWidth", createMethodWrapper (&ScaleLayer::setStrokeWidth)));
			clazz->addMethod (new Method ("getStrokeDash", createMethodWrapper (&ScaleLayer::getStrokeDash)));
			clazz->addMethod (new Method ("setStrokeDash", createMethodWrapper (&ScaleLayer::setStrokeDash)));
			clazz->addMethod (new Method ("getStrokeColor", createMethodWrapper (&ScaleLayer::getStrokeColor)));
			clazz->addMethod (new Method ("setStrokeColor", createMethodWrapper (&ScaleLayer::setStrokeColor)));
			clazz->addMethod (new Method ("getFillColor", createMethodWrapper (&ScaleLayer::getFillColor)));
			clazz->addMethod (new Method ("setFillColor", createMethodWrapper (&ScaleLayer::setFillColor)));
			clazz->addMethod (new Method ("visit", createMethodWrapper (&ScaleLayer::visit)));
		}
	}
	{
		Class *clazz = new Class ("SceneAPI", typeid (SceneAPI &), new Reflection::PtrDeleter <SceneAPI>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <SceneAPI, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&SceneAPI::create)));
			clazz->addMethod (new Method ("getContainer", createMethodWrapper (&SceneAPI::getContainer)));
			clazz->addMethod (new Method ("setContainer", createMethodWrapper (&SceneAPI::setContainer)));
			clazz->addMethod (new Method ("getToolContainer", createMethodWrapper (&SceneAPI::getToolContainer)));
			clazz->addMethod (new Method ("setToolContainer", createMethodWrapper (&SceneAPI::setToolContainer)));
		}
	}
}

struct Sentinel_dataFlowGui {
        Sentinel_dataFlowGui ()
        {
                createReflectionDatabase_dataFlowGui ();
        }
};

static Sentinel_dataFlowGui sentinel_dataFlowGui;
} // namespace

