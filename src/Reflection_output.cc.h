/*
 * This file was aut-generated by tiliaeparser. Do not modify. Unless.
 * Include only once.
 * https://github.com/iwasz/tiliae
 */

#include <reflection/Reflection.h>
#include "/home/iwasz/workspace/data-flow-gui/src/Reflection_input.cc"

namespace {
using namespace Core;
using namespace Reflection;

void createReflectionDatabase_gtkFormsDemo ()
{
	{
		Class *clazz = new Class ("Object", typeid (Core::Object &), new Reflection::PtrDeleter <Core::Object>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("IEditor", typeid (Editor::IEditor &), new Reflection::PtrDeleter <Editor::IEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::IEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("IFactory", typeid (Factory::IFactory &), new Reflection::PtrDeleter <Factory::IFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::IFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("JEditor", typeid (Editor::JEditor &), new Reflection::PtrDeleter <Editor::JEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IEditor");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::JEditor::convert)));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::JEditor::edit)));
		}
	}
	{
		Class *clazz = new Class ("ListToStringEditor", typeid (Editor::ListToStringEditor &), new Reflection::PtrDeleter <Editor::ListToStringEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("JEditor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Editor::ListToStringEditor, const std::string &, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("edit", createMethodWrapper (&Editor::ListToStringEditor::edit)));
			clazz->addMethod (new Method ("getDelimiter", createMethodWrapper (&Editor::ListToStringEditor::getDelimiter)));
			clazz->addMethod (new Method ("setDelimiter", createMethodWrapper (&Editor::ListToStringEditor::setDelimiter)));
			clazz->addMethod (new Method ("getQuotation", createMethodWrapper (&Editor::ListToStringEditor::getQuotation)));
			clazz->addMethod (new Method ("setQuotation", createMethodWrapper (&Editor::ListToStringEditor::setQuotation)));
		}
	}
	{
		Class *clazz = new Class ("ChainFactory", typeid (Factory::ChainFactory &), new Reflection::PtrDeleter <Factory::ChainFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactory");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Factory::ChainFactory, _Bool>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::ChainFactory::create)));
			clazz->addMethod (new Method ("setFactories", createMethodWrapper (&Factory::ChainFactory::setFactories)));
			clazz->addMethod (new Method ("addFactory", createMethodWrapper (&Factory::ChainFactory::addFactory)));
			clazz->addMethod (new Method ("getFactories", createMethodWrapper (&Factory::ChainFactory::getFactories)));
		}
	}
	{
		Class *clazz = new Class ("K202", typeid (k202::K202 &), new Reflection::PtrDeleter <k202::K202>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("setBeanWrapper", createMethodWrapper (&k202::K202::setBeanWrapper)));
		}
	}
	{
		Class *clazz = new Class ("Sender", typeid (Signal::Sender &), new Reflection::PtrDeleter <Signal::Sender>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, void *, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Signal::Sender, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getOwnerObject", createMethodWrapper (&Signal::Sender::getOwnerObject)));
			clazz->addMethod (new Method ("setOwnerObject", createMethodWrapper (&Signal::Sender::setOwnerObject)));
			clazz->addMethod (new Method ("getScope", createMethodWrapper (&Signal::Sender::getScope)));
			clazz->addMethod (new Method ("setScope", createMethodWrapper (&Signal::Sender::setScope)));
			clazz->addMethod (new Method ("setPath", createMethodWrapper (&Signal::Sender::setPath)));
			clazz->addMethod (new Method ("getPath", createMethodWrapper (&Signal::Sender::getPath)));
			clazz->addMethod (new Method ("getParamVector", createMethodWrapper (&Signal::Sender::getParamVector)));
			clazz->addMethod (new Method ("setParamVector", createMethodWrapper (&Signal::Sender::setParamVector)));
			clazz->addMethod (new Method ("getParamMap", createMethodWrapper (&Signal::Sender::getParamMap)));
			clazz->addMethod (new Method ("setParamMap", createMethodWrapper (&Signal::Sender::setParamMap)));
		}
	}
	{
		Class *clazz = new Class ("IMapping", typeid (GtkForms::IMapping &), new Reflection::PtrDeleter <GtkForms::IMapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::IMapping::getWidget)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::IMapping::getModel)));
			clazz->addMethod (new Method ("view2Model", createMethodWrapper (&GtkForms::IMapping::view2Model)));
			clazz->addMethod (new Method ("model2View", createMethodWrapper (&GtkForms::IMapping::model2View)));
		}
	}
	{
		Class *clazz = new Class ("Mapping", typeid (GtkForms::Mapping &), new Reflection::PtrDeleter <GtkForms::Mapping>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IMapping");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::Mapping, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("widget", Reflection::createFieldWrapper (&GtkForms::Mapping::widget)));
			clazz->addField (new Field ("property", Reflection::createFieldWrapper (&GtkForms::Mapping::property)));
			clazz->addField (new Field ("model", Reflection::createFieldWrapper (&GtkForms::Mapping::model)));
			clazz->addField (new Field ("m2vEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::m2vEditor)));
			clazz->addField (new Field ("v2mEditor", Reflection::createFieldWrapper (&GtkForms::Mapping::v2mEditor)));
			clazz->addMethod (new Method ("getWidget", createMethodWrapper (&GtkForms::Mapping::getWidget)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&GtkForms::Mapping::getProperty)));
			clazz->addMethod (new Method ("getModel", createMethodWrapper (&GtkForms::Mapping::getModel)));
		}
	}
	{
		Class *clazz = new Class ("MappingVector", typeid (GtkForms::MappingVector&), new PtrDeleter <GtkForms::MappingVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::MappingVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::MappingVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("IPageDecorator", typeid (GtkForms::IPageDecorator &), new Reflection::PtrDeleter <GtkForms::IPageDecorator>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("run", createMethodWrapper (&GtkForms::IPageDecorator::run)));
		}
	}
	{
		Class *clazz = new Class ("PageDecoratorVector", typeid (GtkForms::PageDecoratorVector&), new PtrDeleter <GtkForms::PageDecoratorVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::PageDecoratorVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::PageDecoratorVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("AbstractView", typeid (GtkForms::AbstractView &), new Reflection::PtrDeleter <GtkForms::AbstractView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addField (new Field ("name", Reflection::createFieldWrapper (&GtkForms::AbstractView::name)));
			clazz->addField (new Field ("mappings", Reflection::createFieldWrapper (&GtkForms::AbstractView::mappings)));
			clazz->addField (new Field ("decorators", Reflection::createFieldWrapper (&GtkForms::AbstractView::decorators)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&GtkForms::AbstractView::getName)));
			clazz->addMethod (new Method ("contId", createMethodWrapper (&GtkForms::AbstractView::contId)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::AbstractView::loadUi)));
			clazz->addMethod (new Method ("show", createMethodWrapper (&GtkForms::AbstractView::show)));
			clazz->addMethod (new Method ("hide", createMethodWrapper (&GtkForms::AbstractView::hide)));
			clazz->addMethod (new Method ("refresh", createMethodWrapper (&GtkForms::AbstractView::refresh)));
			clazz->addMethod (new Method ("reparent", createMethodWrapper (&GtkForms::AbstractView::reparent)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::AbstractView::destroyUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::AbstractView::isLoaded)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::AbstractView::getUiOrThrow)));
			clazz->addMethod (new Method ("getInputs", createMethodWrapper (&GtkForms::AbstractView::getInputs)));
			clazz->addMethod (new Method ("getSlots", createMethodWrapper (&GtkForms::AbstractView::getSlots)));
			clazz->addMethod (new Method ("getSlot", createMethodWrapper (&GtkForms::AbstractView::getSlot)));
			clazz->addMethod (new Method ("printStructure", createMethodWrapper (&GtkForms::AbstractView::printStructure)));
			clazz->addMethod (new Method ("getMappingsByInput", createMethodWrapper (&GtkForms::AbstractView::getMappingsByInput)));
			clazz->addMethod (new Method ("getMappingsByModelRange", createMethodWrapper (&GtkForms::AbstractView::getMappingsByModelRange)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::AbstractView::connectSignals)));
			clazz->addMethod (new Method ("getController", createMethodWrapper (&GtkForms::AbstractView::getController)));
			clazz->addMethod (new Method ("setController", createMethodWrapper (&GtkForms::AbstractView::setController)));
			clazz->addMethod (new Method ("setConfig", createMethodWrapper (&GtkForms::AbstractView::setConfig)));
		}
	}
	{
		Class *clazz = new Class ("ViewMap", typeid (GtkForms::ViewMap&), new PtrDeleter <GtkForms::ViewMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <GtkForms::ViewMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <GtkForms::ViewMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <GtkForms::ViewMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <GtkForms::ViewMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <GtkForms::ViewMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("BuilderView", typeid (GtkForms::BuilderView &), new Reflection::PtrDeleter <GtkForms::BuilderView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("AbstractView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <GtkForms::BuilderView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("file", Reflection::createFieldWrapper (&GtkForms::BuilderView::file)));
			clazz->addField (new Field ("alsoLoad", Reflection::createFieldWrapper (&GtkForms::BuilderView::alsoLoad)));
			clazz->addField (new Field ("loadWholeFile", Reflection::createFieldWrapper (&GtkForms::BuilderView::loadWholeFile)));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&GtkForms::BuilderView::loadUi)));
			clazz->addMethod (new Method ("isLoaded", createMethodWrapper (&GtkForms::BuilderView::isLoaded)));
			clazz->addMethod (new Method ("destroyUi", createMethodWrapper (&GtkForms::BuilderView::destroyUi)));
			clazz->addMethod (new Method ("getUiOrThrow", createMethodWrapper (&GtkForms::BuilderView::getUiOrThrow)));
			clazz->addMethod (new Method ("connectSignals", createMethodWrapper (&GtkForms::BuilderView::connectSignals)));
		}
	}
	{
		Class *clazz = new Class ("MainView", typeid (MainView &), new Reflection::PtrDeleter <MainView>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("BuilderView");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <MainView, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("loadUi", createMethodWrapper (&MainView::loadUi)));
		}
	}
}

struct Sentinel_gtkFormsDemo {
        Sentinel_gtkFormsDemo ()
        {
                createReflectionDatabase_gtkFormsDemo ();
        }
};

static Sentinel_gtkFormsDemo sentinel_gtkFormsDemo;
} // namespace

